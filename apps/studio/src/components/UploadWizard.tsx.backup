'use client'

import { useState, useRef, useEffect } from 'react'
import { ChevronLeftIcon, ChevronRightIcon, XMarkIcon } from '@heroicons/react/24/outline'
import CustomDropdown from './CustomDropdown'
import ToggleSwitch from './ToggleSwitch'
import { useRequestUploadUrl, useCreateDraft, useCompleteUpload } from '@/hooks/use-upload'
import { useQueryClient } from '@tanstack/react-query'
import { useAuth } from '@clerk/nextjs'
import { apiClient } from '@/lib/api-client'

interface UploadFile {
  id: string
  name: string
  size: number
  type: string
  progress: number
  status: 'uploading' | 'processing' | 'completed' | 'error'
  uploadId?: string // Mux upload ID
  errorMessage?: string // Error details for failed uploads
}

interface VideoDetails {
  title: string
  description: string
  thumbnail: string | null
  thumbnailOptions: string[] // Array of auto-generated thumbnail options
  category: string
  language: string
  tags: string[]
  playlist?: string
  duration?: number // Duration in seconds
}

interface VisibilitySettings {
  visibility: 'public' | 'unlisted' | 'private'
  scheduledDate?: Date
  allowComments: boolean
  allowRatings: boolean
  license: string
  isForKids: boolean
}

interface UploadWizardProps {
  onClose: () => void
  onMultipleUploads?: (files: UploadFile[]) => void
}

interface PublishedVideo {
  id: string
  title: string
  url: string
  thumbnail: string
  uploadDate: string
  duration: string
  status: string // Video status (PUBLISHED, PROCESSING, etc.)
}

export default function UploadWizard({ onClose, onMultipleUploads }: UploadWizardProps) {
  const [isInitialUpload, setIsInitialUpload] = useState(true)
  const [currentStep, setCurrentStep] = useState(1)
  const [uploadedFiles, setUploadedFiles] = useState<UploadFile[]>([])
  const [videoDetails, setVideoDetails] = useState<VideoDetails>({
    title: '',
    description: '',
    thumbnail: null,
    thumbnailOptions: [],
    category: 'entertainment',
    language: 'en',
    tags: []
  })
  const [visibilitySettings, setVisibilitySettings] = useState<VisibilitySettings>({
    visibility: 'private',
    allowComments: true,
    allowRatings: true,
    license: 'standard',
    isForKids: false
  })
  const [selectedThumbnail, setSelectedThumbnail] = useState(1)
  const [tagInput, setTagInput] = useState('')
  const [isAutoAdvancing, setIsAutoAdvancing] = useState(false)
  const [isPublished, setIsPublished] = useState(false)
  const [publishedVideo, setPublishedVideo] = useState<PublishedVideo | null>(null)
  const [isPollingStatus, setIsPollingStatus] = useState(false)
  const [showProcessingComplete, setShowProcessingComplete] = useState(false)
  const [draftVideoId, setDraftVideoId] = useState<string | null>(null)
  const [videoFileForPreview, setVideoFileForPreview] = useState<File | null>(null)
  const [acceptedTerms, setAcceptedTerms] = useState(false)
  const [acceptedGuidelines, setAcceptedGuidelines] = useState(false)
  const [processingStages, setProcessingStages] = useState({
    upload: false,
    processing: false,
    moderation: false,
    thumbnails: false
  })
  const [muxAssetStatus, setMuxAssetStatus] = useState<string | null>(null)
  const intervalsRef = useRef<Set<NodeJS.Timeout>>(new Set())
  const statusPollingRef = useRef<NodeJS.Timeout | null>(null)
  
  // React Query hooks for upload
  const queryClient = useQueryClient()
  const { getToken } = useAuth()
  const requestUploadUrl = useRequestUploadUrl()
  const createDraft = useCreateDraft()
  const completeUpload = useCompleteUpload()

  // Extract video duration from file
  const getVideoDuration = (file: File): Promise<number> => {
    return new Promise((resolve) => {
      const video = document.createElement('video')
      video.preload = 'metadata'
      
      video.onloadedmetadata = () => {
        window.URL.revokeObjectURL(video.src)
        const duration = Math.round(video.duration) || 0
        resolve(duration)
      }
      
      video.onerror = () => {
        window.URL.revokeObjectURL(video.src)
        resolve(0) // Default to 0 if we can't read duration
      }
      
      video.src = URL.createObjectURL(file)
    })
  }

  // Generate video thumbnail from file at specific timestamp
  const generateVideoThumbnailAtTime = (file: File, timePercentage: number): Promise<string> => {
    return new Promise((resolve) => {
      const video = document.createElement('video')
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      
      video.preload = 'metadata'
      video.muted = true
      
      video.onloadedmetadata = () => {
        // Set canvas dimensions to video dimensions
        canvas.width = video.videoWidth
        canvas.height = video.videoHeight
        
        // Seek to specified percentage of the video
        video.currentTime = video.duration * timePercentage
      }
      
      video.onseeked = () => {
        if (ctx) {
          // Draw the video frame to canvas
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height)
          
          // Convert to data URL
          const thumbnailDataUrl = canvas.toDataURL('image/jpeg', 0.8)
          
          // Clean up
          window.URL.revokeObjectURL(video.src)
          resolve(thumbnailDataUrl)
        } else {
          window.URL.revokeObjectURL(video.src)
          resolve('')
        }
      }
      
      video.onerror = () => {
        window.URL.revokeObjectURL(video.src)
        resolve('') // Return empty string if we can't generate thumbnail
      }
      
      video.src = URL.createObjectURL(file)
    })
  }

  // Generate multiple thumbnail options from different timestamps
  const generateMultipleThumbnails = async (file: File): Promise<string[]> => {
    const thumbnailPromises = [
      generateVideoThumbnailAtTime(file, 0.1),  // 10% into video
      generateVideoThumbnailAtTime(file, 0.5),  // 50% into video  
      generateVideoThumbnailAtTime(file, 0.8)   // 80% into video
    ]
    
    try {
      const thumbnails = await Promise.all(thumbnailPromises)
      return thumbnails.filter(thumb => thumb !== '') // Filter out failed generations
    } catch (error) {
      console.error('Failed to generate thumbnails:', error)
      return []
    }
  }

  // Helper function to format duration
  const formatDuration = (seconds: number): string => {
    if (!seconds || seconds === 0) return '0:00'
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  // Handle custom thumbnail upload
  const handleCustomThumbnailUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    // Validate file type
    if (!file.type.startsWith('image/')) {
      alert('Please select a valid image file')
      return
    }

    // Validate file size (max 5MB)
    const maxSize = 5 * 1024 * 1024 // 5MB
    if (file.size > maxSize) {
      alert('Image file size must be less than 5MB')
      return
    }

    // Create a data URL from the file
    const reader = new FileReader()
    reader.onload = (e) => {
      const thumbnailDataUrl = e.target?.result as string
      if (thumbnailDataUrl) {
        // Update the video details with the custom thumbnail
        setVideoDetails(prev => ({
          ...prev,
          thumbnail: thumbnailDataUrl
        }))
        
        // Select the first thumbnail option (where we show the custom thumbnail)
        setSelectedThumbnail(1)
        
        console.log('Custom thumbnail uploaded successfully')
      }
    }
    
    reader.onerror = () => {
      alert('Failed to read the image file. Please try again.')
    }
    
    reader.readAsDataURL(file)
  }

  // Wrapper function to invalidate cache before closing
  const handleClose = () => {
    // Always invalidate queries when closing to ensure fresh data
    console.log('🔄 Invalidating studio videos cache before closing...')
    queryClient.invalidateQueries({ queryKey: ['studio', 'videos'] })
    queryClient.invalidateQueries({ queryKey: ['dashboard'] })
    onClose()
  }

  // Clean up video object URL when component unmounts or video file changes
  useEffect(() => {
    return () => {
      if (videoFileForPreview) {
        const objectUrl = URL.createObjectURL(videoFileForPreview)
        URL.revokeObjectURL(objectUrl)
      }
    }
  }, [videoFileForPreview])

  // Real processing status checking when entering step 3 (Processing)
  useEffect(() => {
    if (currentStep === 3 && draftVideoId) {
      // Initialize processing stages based on current status
      setProcessingStages({
        upload: uploadedFiles[0]?.status === 'completed', // File upload complete
        processing: false, // Will be updated based on Mux status
        moderation: false, // Will be updated based on video status
        thumbnails: false // Will be updated based on thumbnail generation
      })

      // Poll for video processing status using authenticated API client
      const pollStatus = async () => {
        try {
          const token = await getToken()
          
          const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/studio/videos/${draftVideoId}`, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          })
          
          if (response.ok) {
            const videoData = await response.json()
            console.log('📹 Video data poll result:', {
              videoId: videoData.id,
              status: videoData.status,
              muxPlaybackId: videoData.muxPlaybackId,
              thumbnailUrl: videoData.thumbnailUrl,
              isApproved: videoData.isApproved
            })
            
            // Update processing stages based on real status
            setProcessingStages(prev => ({
              ...prev,
              processing: videoData.muxPlaybackId ? true : false,
              thumbnails: videoData.thumbnailUrl ? true : false,
              moderation: videoData.status === 'PUBLISHED' || videoData.isApproved
            }))

            // If processing complete, we're done polling
            if (videoData.muxPlaybackId && videoData.thumbnailUrl) {
              console.log('✅ All processing complete, stopping poll')
              return true // Signal to stop polling
            }
          } else {
            console.error('❌ API response not ok:', response.status, response.statusText)
          }
        } catch (error) {
          console.error('❌ Error polling video status:', error)
        }
        return false
      }

      // Start polling immediately and then every 3 seconds
      let pollInterval: NodeJS.Timeout
      let pollCount = 0
      const maxPolls = 60 // Stop after 3 minutes (60 * 3 seconds)
      
      const startPolling = async () => {
        console.log('🔄 Starting status polling for video:', draftVideoId)
        const isComplete = await pollStatus()
        if (!isComplete) {
          pollInterval = setInterval(async () => {
            pollCount++
            console.log(`🔄 Poll attempt ${pollCount}/${maxPolls}`)
            
            const shouldStop = await pollStatus()
            
            // Stop if complete or max polls reached
            if (shouldStop || pollCount >= maxPolls) {
              console.log(shouldStop ? '✅ Processing complete' : '⏰ Max polls reached, stopping')
              clearInterval(pollInterval)
              
              // If we hit max polls, assume processing is complete for mock videos
              if (pollCount >= maxPolls && !shouldStop) {
                console.log('⚠️ Assuming processing complete due to timeout')
                setProcessingStages(prev => ({
                  ...prev,
                  processing: true,
                  moderation: true
                }))
              }
            }
          }, 3000)
        }
      }
      
      startPolling()
      
      return () => {
        if (pollInterval) clearInterval(pollInterval)
      }
    }
  }, [currentStep, draftVideoId, getToken])

  useEffect(() => {
    return () => {
      // Clean up all intervals when component unmounts
      intervalsRef.current.forEach(interval => clearInterval(interval))
      if (statusPollingRef.current) {
        clearInterval(statusPollingRef.current)
      }
    }
  }, [])

  // Note: Auto-advance logic is now handled within upload completion handlers

  // Status polling effect - checks video status when it's processing
  useEffect(() => {
    if (!publishedVideo || publishedVideo.status === 'PUBLISHED' || !isPublished) {
      return
    }

    console.log('Starting status polling for video:', publishedVideo.id)
    setIsPollingStatus(true)
    
    // Set a timeout to stop polling after 10 minutes (videos shouldn't take longer)
    const timeoutId = setTimeout(() => {
      console.log('Polling timeout reached (10 minutes), stopping status check')
      setIsPollingStatus(false)
      if (statusPollingRef.current) {
        clearInterval(statusPollingRef.current)
        statusPollingRef.current = null
      }
    }, 10 * 60 * 1000) // 10 minutes

    const pollStatus = async () => {
      try {
        const updatedVideo = await apiClient.request(`/api/studio/videos/${publishedVideo.id}`)
        console.log('Polled video status:', updatedVideo.status)
        
        if (updatedVideo.status === 'PUBLISHED') {
          console.log('🎉 Video is now published! Updating UI...')
          
          // Update the published video with new status and details
          setPublishedVideo(prev => prev ? {
            ...prev,
            status: 'PUBLISHED',
            duration: updatedVideo.duration ? `${Math.floor(updatedVideo.duration / 60)}:${String(updatedVideo.duration % 60).padStart(2, '0')}` : prev.duration
          } : null)
          
          // Show processing complete notification
          setShowProcessingComplete(true)
          setTimeout(() => {
            setShowProcessingComplete(false)
          }, 4000)
          
          // Show a brief celebration message
          setTimeout(() => {
            console.log('🚀 Video processing complete! Your video is now live!')
          }, 500)
          
          // Stop polling
          setIsPollingStatus(false)
          if (statusPollingRef.current) {
            clearInterval(statusPollingRef.current)
            statusPollingRef.current = null
          }
          clearTimeout(timeoutId)
          
          // Update the cache immediately for instant table refresh
          queryClient.setQueryData(['studio', 'videos'], (oldData: any) => {
            if (!oldData) return oldData
            
            return {
              ...oldData,
              videos: oldData.videos.map((video: any) => 
                video.id === publishedVideo.id || video.id === draftVideoId
                  ? { 
                      ...video, 
                      status: 'PUBLISHED',
                      duration: updatedVideo.duration || video.duration,
                      publishedAt: new Date().toISOString(),
                      muxPlaybackId: updatedVideo.muxPlaybackId
                    }
                  : video
              )
            }
          })
          
          // Also invalidate to ensure fresh data from server
          queryClient.invalidateQueries({ queryKey: ['studio', 'videos'] })
          queryClient.invalidateQueries({ queryKey: ['dashboard'] })
        }
      } catch (error) {
        console.error('Failed to poll video status:', error)
        
        // Stop polling on authentication errors or other critical errors
        if (error instanceof Error && (
          error.message.includes('Authentication required') ||
          error.message.includes('401') ||
          error.message.includes('Unauthorized')
        )) {
          console.log('Authentication error during polling, stopping status check')
          setIsPollingStatus(false)
          if (statusPollingRef.current) {
            clearInterval(statusPollingRef.current)
            statusPollingRef.current = null
          }
          clearTimeout(timeoutId)
          return
        }
        
        // Continue polling for other types of errors (network issues, etc.)
      }
    }

    // Poll immediately, then every 10 seconds
    pollStatus()
    statusPollingRef.current = setInterval(pollStatus, 10000)

    // Cleanup when effect dependency changes
    return () => {
      if (statusPollingRef.current) {
        clearInterval(statusPollingRef.current)
        statusPollingRef.current = null
      }
      clearTimeout(timeoutId)
      setIsPollingStatus(false)
    }
  }, [publishedVideo?.id, publishedVideo?.status, isPublished, queryClient])

  const steps = [
    { id: 1, title: "Details", description: "Add title, description & thumbnail" },
    { id: 2, title: "Visibility", description: "Choose who can see your video" },
    { id: 3, title: "Preview", description: "Preview & accept terms" },
    { id: 4, title: "Publish", description: "Publish your video" }
  ]

  const categoryOptions = [
    { value: "entertainment", label: "Entertainment", icon: "🎬" },
    { value: "education", label: "Education", icon: "📚" },
    { value: "gaming", label: "Gaming", icon: "🎮" },
    { value: "music", label: "Music", icon: "🎵" },
    { value: "technology", label: "Technology", icon: "💻" },
    { value: "lifestyle", label: "Lifestyle", icon: "✨" },
    { value: "sports", label: "Sports", icon: "⚽" },
    { value: "news", label: "News & Politics", icon: "📰" }
  ]

  const languageOptions = [
    { value: "en", label: "English", icon: "🇺🇸" },
    { value: "es", label: "Spanish", icon: "🇪🇸" },
    { value: "fr", label: "French", icon: "🇫🇷" },
    { value: "de", label: "German", icon: "🇩🇪" }
  ]

  const playlistOptions = [
    { value: "", label: "Select playlist (optional)", icon: "📁" },
    { value: "recent", label: "Recent uploads", icon: "🆕" },
    { value: "favorites", label: "My favorites", icon: "⭐" },
    { value: "tutorials", label: "Tutorials", icon: "📚" },
    { value: "vlogs", label: "Vlogs", icon: "🎥" }
  ]

  const visibilityOptions = [
    { value: "public", label: "Public", icon: "🌍" },
    { value: "unlisted", label: "Unlisted", icon: "🔗" },
    { value: "private", label: "Private", icon: "🔒" }
  ]

  const handleFileUpload = async (files: FileList) => {
    const fileArray = Array.from(files)
    console.log('handleFileUpload called with', fileArray.length, 'files')
    
    // If multiple files, redirect to progress tracker
    if (fileArray.length > 1) {
      console.log('Multiple files detected, creating upload objects...')
      const newFiles: UploadFile[] = fileArray.map((file, index) => ({
        id: Date.now() + index + '',
        name: file.name,
        size: file.size,
        type: file.type,
        progress: 0,
        status: 'uploading'
      }))
      
      console.log('Created files:', newFiles)
      
      // Call the multiple uploads handler if provided
      if (onMultipleUploads) {
        console.log('Calling onMultipleUploads...')
        onMultipleUploads(newFiles)
      } else {
        console.log('onMultipleUploads not provided!')
      }
      
      // Close the wizard
      console.log('Closing wizard...')
      handleClose()
      return
    }
    
    // Single file - continue with wizard flow
    console.log('Single file detected, processing for wizard...')
    const file = fileArray[0]
    
    // Extract video duration and generate multiple thumbnails
    console.log('📏 Extracting video metadata...')
    const [videoDuration, thumbnailOptions] = await Promise.all([
      getVideoDuration(file),
      generateMultipleThumbnails(file)
    ])
    console.log('📏 Video duration extracted:', videoDuration, 'seconds')
    console.log('🖼️ Generated', thumbnailOptions.length, 'thumbnail options')
    
    // Use the first thumbnail as default
    const defaultThumbnail = thumbnailOptions.length > 0 ? thumbnailOptions[0] : ''
    
    const newFile: UploadFile = {
      id: Date.now() + '',
      name: file.name,
      size: file.size,
      type: file.type,
      progress: 0,
      status: 'uploading'
    }
    
    console.log('Setting uploaded files:', [newFile])
    setUploadedFiles([newFile])
    
    // Store the video file for preview in step 4
    setVideoFileForPreview(file)
    
    try {
      // Validate file before upload
      const maxFileSize = 5 * 1024 * 1024 * 1024 // 5GB
      const allowedTypes = ['video/mp4', 'video/mov', 'video/avi', 'video/mkv', 'video/webm']
      
      if (file.size > maxFileSize) {
        throw new Error(`File size too large. Maximum allowed: ${maxFileSize / (1024 * 1024 * 1024)}GB`)
      }
      
      if (!allowedTypes.includes(file.type)) {
        throw new Error(`Unsupported file type: ${file.type}. Allowed types: ${allowedTypes.join(', ')}`)
      }

      // Request upload URL from Mux API
      console.log('Requesting upload URL...')
      setUploadedFiles(prev => prev.map(f => 
        f.id === newFile.id 
          ? { ...f, status: 'uploading', progress: 0 }
          : f
      ))

      const uploadResponse = await requestUploadUrl.mutateAsync({
        fileName: file.name,
        fileSize: file.size,
        mimeType: file.type
      })
      
      console.log('Upload URL received:', uploadResponse)
      
      // Update file with uploadId from response
      setUploadedFiles(prev => prev.map(f => 
        f.id === newFile.id 
          ? { ...f, uploadId: uploadResponse.uploadId }
          : f
      ))
      
      // Upload file to Mux using XMLHttpRequest for progress tracking
      await uploadFileWithProgress(file, uploadResponse.uploadUrl, newFile.id, uploadResponse.uploadId, videoDuration, defaultThumbnail, thumbnailOptions)
      
    } catch (error) {
      console.error('Upload failed:', error)
      const errorMessage = error instanceof Error ? error.message : 'Upload failed unexpectedly'
      
      setUploadedFiles(prev => prev.map(f => 
        f.id === newFile.id 
          ? { 
              ...f, 
              status: 'error', 
              progress: 0,
              errorMessage 
            }
          : f
      ))
      
      // Show user-friendly error notification
      alert(`Upload failed: ${errorMessage}`)
    }
  }

  const uploadFileWithProgress = (file: File, uploadUrl: string, fileId: string, uploadId: string, videoDuration: number = 0, videoThumbnail: string = '', thumbnailOptions: string[] = []): Promise<void> => {
    return new Promise((resolve, reject) => {
      // Check if this is a mock upload (fake URL)
      const isMockUpload = uploadUrl.includes('example.com/mock-upload')
      
      if (isMockUpload) {
        console.log('🎭 Mock upload detected - simulating upload progress')
        
        // Simulate upload progress for mock uploads
        let progress = 0
        const progressInterval = setInterval(() => {
          progress += Math.random() * 20
          if (progress >= 100) {
            progress = 100
            clearInterval(progressInterval)
            
            // Mark as completed
            setUploadedFiles(prev => prev.map(f => 
              f.id === fileId 
                ? { ...f, progress: 100, status: 'completed', errorMessage: undefined }
                : f
            ))
            
            // Set default title from filename and thumbnail if not already set
            if (!videoDetails.title) {
              const fileName = file.name.replace(/\.[^/.]+$/, '') // Remove extension
              setVideoDetails(prev => ({ 
                ...prev, 
                title: fileName,
                thumbnail: videoThumbnail || prev.thumbnail,
                thumbnailOptions: thumbnailOptions,
                duration: videoDuration
              }))
            } else if (videoThumbnail && !videoDetails.thumbnail) {
              // Just add thumbnail if title already exists
              setVideoDetails(prev => ({ 
                ...prev, 
                thumbnail: videoThumbnail,
                thumbnailOptions: thumbnailOptions,
                duration: videoDuration
              }))
            }
            
            // Create draft video immediately after mock upload completes
            const createDraftAsync = async () => {
              try {
                console.log('Creating draft video for mock upload...', { uploadId, fileId, fileName: file.name })
                
                const draftResponse = await createDraft.mutateAsync({
                  uploadId: uploadId,
                  fileName: file.name,
                  duration: videoDuration,
                  thumbnailUrl: videoThumbnail
                })
                
                console.log('Mock draft created:', draftResponse)
                setDraftVideoId(draftResponse.videoId)
                
                // Add draft to table immediately
                const newDraftForCache = {
                  id: draftResponse.videoId,
                  title: file.name.replace(/\.[^/.]+$/, ''),
                  description: '',
                  status: 'DRAFT',
                  visibility: 'private',
                  duration: videoDuration,
                  views: 0,
                  createdAt: new Date().toISOString(),
                  publishedAt: null,
                  thumbnailUrl: videoThumbnail,
                  videoUrl: '',
                  muxPlaybackId: null
                }

                // Invalidate queries to refresh the content table
                console.log('🔄 Mock draft created, invalidating queries...')
                queryClient.invalidateQueries({ queryKey: ['studio', 'videos'] })
                queryClient.invalidateQueries({ queryKey: ['dashboard'] })
                
              } catch (error) {
                console.error('Failed to create mock draft:', error)
                // Continue with wizard even if draft creation fails
              }
            }
            createDraftAsync()
            
            // Trigger auto-advance for single file uploads (same as real upload logic)
            if (isInitialUpload && !isAutoAdvancing) {
              console.log('🎯 Triggering auto-advance from mock upload')
              setIsAutoAdvancing(true)
              setTimeout(() => {
                console.log('🎯 Auto-advancing to Details step from mock upload')
                setIsInitialUpload(false)
                setCurrentStep(1)
                setIsAutoAdvancing(false)
              }, 800)
            }
            
            resolve()
          } else {
            // Update progress
            setUploadedFiles(prev => prev.map(f => 
              f.id === fileId 
                ? { 
                    ...f, 
                    progress: Math.round(progress), 
                    status: 'uploading',
                    errorMessage: undefined
                  }
                : f
            ))
          }
        }, 200) // Update every 200ms
        
        return
      }
      
      // Real upload logic for actual Mux URLs
      const xhr = new XMLHttpRequest()
      let retryCount = 0
      const maxRetries = 3
      
      // Set timeout for uploads (30 minutes)
      xhr.timeout = 30 * 60 * 1000
      
      // Track upload progress
      xhr.upload.addEventListener('progress', (event) => {
        if (event.lengthComputable) {
          const progress = Math.round((event.loaded / event.total) * 100)
          console.log(`File ${fileId} progress: ${progress}%`)
          
          setUploadedFiles(prev => prev.map(f => 
            f.id === fileId 
              ? { 
                  ...f, 
                  progress, 
                  status: progress >= 100 ? 'processing' : 'uploading',
                  errorMessage: undefined // Clear any previous errors
                }
              : f
          ))
        }
      })
      
      // Handle upload completion
      xhr.addEventListener('load', () => {
        if (xhr.status >= 200 && xhr.status < 300) {
          console.log('Upload completed for file:', fileId)
          
          setUploadedFiles(prev => prev.map(f => 
            f.id === fileId 
              ? { ...f, progress: 100, status: 'completed', errorMessage: undefined }
              : f
          ))
          
          // Set default title from filename and thumbnail if not already set
          if (!videoDetails.title) {
            const fileName = file.name.replace(/\.[^/.]+$/, '') // Remove extension
            setVideoDetails(prev => ({ 
              ...prev, 
              title: fileName,
              thumbnail: videoThumbnail || prev.thumbnail,
              thumbnailOptions: thumbnailOptions,
              duration: videoDuration
            }))
          } else if (videoThumbnail && !videoDetails.thumbnail) {
            // Just add thumbnail if title already exists
            setVideoDetails(prev => ({ 
              ...prev, 
              thumbnail: videoThumbnail,
              thumbnailOptions: thumbnailOptions,
              duration: videoDuration
            }))
          }
          
          // Create draft video immediately after upload completes
          const createDraftAsync = async () => {
            try {
              console.log('Creating draft video...', { uploadId, fileId, fileName: file.name })
              
              const draftResponse = await createDraft.mutateAsync({
                uploadId: uploadId,
                fileName: file.name,
                duration: videoDuration,
                thumbnailUrl: videoThumbnail
              })
              
              console.log('Draft created:', draftResponse)
              setDraftVideoId(draftResponse.videoId)
              
              // Add draft to table immediately
              const newDraftForCache = {
                id: draftResponse.videoId,
                title: file.name.replace(/\.[^/.]+$/, ''),
                description: '',
                status: 'DRAFT',
                visibility: 'private',
                duration: videoDuration,
                views: 0,
                createdAt: new Date().toISOString(),
                publishedAt: null,
                thumbnailUrl: videoThumbnail,
                videoUrl: '',
                muxPlaybackId: null
              }

              // Invalidate queries to refresh the content table
              console.log('🔄 Draft created, invalidating queries...')
              queryClient.invalidateQueries({ queryKey: ['studio', 'videos'] })
              queryClient.invalidateQueries({ queryKey: ['dashboard'] })
              
            } catch (error) {
              console.error('Failed to create draft:', error)
              // Continue with wizard even if draft creation fails
            }
          }
          createDraftAsync()
          
          // Trigger auto-advance from initial upload to first step (Details)
          if (isInitialUpload && !isAutoAdvancing) {
            console.log('Triggering auto-advance from initial upload')
            setIsAutoAdvancing(true)
            setTimeout(() => {
              console.log('Auto-advancing to Details step')
              setIsInitialUpload(false)
              setCurrentStep(1)
              setIsAutoAdvancing(false)
            }, 800)
          }
          
          resolve()
        } else {
          const errorMessage = `Upload failed with status ${xhr.status}${xhr.statusText ? ': ' + xhr.statusText : ''}`
          console.error(errorMessage)
          
          // Update UI with error
          setUploadedFiles(prev => prev.map(f => 
            f.id === fileId 
              ? { ...f, status: 'error', progress: 0, errorMessage }
              : f
          ))
          
          reject(new Error(errorMessage))
        }
      })
      
      // Handle upload errors
      xhr.addEventListener('error', () => {
        const errorMessage = 'Network error during upload'
        console.error(errorMessage, 'for file:', fileId)
        
        setUploadedFiles(prev => prev.map(f => 
          f.id === fileId 
            ? { ...f, status: 'error', progress: 0, errorMessage }
            : f
        ))
        
        reject(new Error(errorMessage))
      })
      
      // Handle upload timeout
      xhr.addEventListener('timeout', () => {
        const errorMessage = 'Upload timed out. Please try again with a smaller file or better internet connection.'
        console.error(errorMessage, 'for file:', fileId)
        
        setUploadedFiles(prev => prev.map(f => 
          f.id === fileId 
            ? { ...f, status: 'error', progress: 0, errorMessage }
            : f
        ))
        
        reject(new Error(errorMessage))
      })
      
      // Handle upload abort
      xhr.addEventListener('abort', () => {
        const errorMessage = 'Upload was cancelled'
        console.log(errorMessage, 'for file:', fileId)
        
        setUploadedFiles(prev => prev.map(f => 
          f.id === fileId 
            ? { ...f, status: 'error', progress: 0, errorMessage }
            : f
        ))
        
        reject(new Error(errorMessage))
      })
      
      // Start the upload
      xhr.open('PUT', uploadUrl)
      xhr.setRequestHeader('Content-Type', file.type)
      xhr.send(file)
      
      // Store xhr reference for potential cancellation
      ;(file as any).xhr = xhr
    })
  }

  const handleTagInputKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault()
      const newTag = tagInput.trim()
      if (newTag && !videoDetails.tags.includes(newTag)) {
        setVideoDetails(prev => ({ ...prev, tags: [...prev.tags, newTag] }))
        setTagInput('')
      }
    }
  }

  const handleTagInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    
    // Check if the last character is a comma
    if (value.endsWith(',')) {
      const newTag = value.slice(0, -1).trim()
      if (newTag && !videoDetails.tags.includes(newTag)) {
        setVideoDetails(prev => ({ ...prev, tags: [...prev.tags, newTag] }))
        setTagInput('')
      } else {
        setTagInput('')
      }
    } else {
      setTagInput(value)
    }
  }

  const removeTag = (tagToRemove: string) => {
    setVideoDetails(prev => ({ 
      ...prev, 
      tags: prev.tags.filter(tag => tag !== tagToRemove) 
    }))
  }

  const nextStep = () => {
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1)
    }
  }

  const handlePublish = async () => {
    if (!draftVideoId) {
      console.error('No draft video ID available for publishing')
      return
    }
    
    try {
      // Publish the draft video with metadata
      console.log('Publishing draft video...', draftVideoId)
      const publishResponse = await completeUpload.mutateAsync({
        videoId: draftVideoId,
        title: videoDetails.title,
        description: videoDetails.description,
        visibility: visibilitySettings.visibility
      })
      
      console.log('Video published:', publishResponse)
      
      // Set the actual status from the API response for display
      const videoStatus = publishResponse.status || 'PUBLISHED'
      
      const publishedVideo: PublishedVideo = {
        id: publishResponse.videoId || uploadedFiles[0].id,
        title: videoDetails.title || 'Untitled Video',
        url: `https://fabl.tv/watch/${publishResponse.videoId || uploadedFiles[0].id}`,
        thumbnail: publishResponse.thumbnail || videoDetails.thumbnail || '/api/placeholder/320/180',
        uploadDate: new Date().toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'short', 
          day: 'numeric' 
        }),
        duration: publishResponse.duration ? formatDuration(Number(publishResponse.duration)) : (videoDetails.duration ? formatDuration(videoDetails.duration) : '0:00'),
        status: videoStatus // Add the actual status for messaging
      }
      
      setPublishedVideo(publishedVideo)
      setIsPublished(true)
      
      // Update the existing draft in cache to published status
      queryClient.setQueryData(['studio', 'videos'], (oldData: any) => {
        if (!oldData) return oldData
        
        return {
          ...oldData,
          videos: oldData.videos.map((video: any) => 
            video.id === draftVideoId 
              ? { 
                  ...video, 
                  title: videoDetails.title,
                  description: videoDetails.description,
                  status: videoStatus,
                  visibility: visibilitySettings.visibility,
                  publishedAt: videoStatus === 'PUBLISHED' ? new Date().toISOString() : null
                }
              : video
          )
        }
      })

      // Also invalidate to ensure fresh data
      queryClient.invalidateQueries({ queryKey: ['studio', 'videos'] })
      queryClient.invalidateQueries({ queryKey: ['dashboard'] })
      
      console.log('✅ Video published, table updated immediately, and queries invalidated')
      
    } catch (error) {
      console.error('Publishing failed:', error)
      // Could add error handling UI here
    }
  }

  const copyVideoLink = () => {
    if (publishedVideo) {
      navigator.clipboard.writeText(publishedVideo.url)
      // Could add a toast notification here
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    } else if (currentStep === 1 && !isInitialUpload) {
      // Go back to initial upload
      setIsInitialUpload(true)
      setCurrentStep(1)
    }
  }

  const canProceed = () => {
    switch (currentStep) {
      case 1: return videoDetails.title.trim().length > 0 // Details step
      case 2: return true // Visibility step
      case 3: return acceptedTerms && acceptedGuidelines // Preview step - must accept terms and guidelines
      case 4: return true // Final publish step
      default: return false
    }
  }

  // Show success modal if video is published
  if (isPublished && publishedVideo) {
    return (
      <div className="h-full flex flex-col">
        <div className="flex-1 overflow-y-auto">
          <div className="flex items-center justify-center min-h-full p-8">
            <div className="max-w-2xl w-full text-center space-y-8">
            {/* Success Header */}
            <div className="space-y-4">
              <div className={`w-20 h-20 rounded-full flex items-center justify-center mx-auto transition-all duration-500 ${
                publishedVideo.status === 'PUBLISHED' 
                  ? 'bg-green-100 scale-110' 
                  : 'bg-blue-100'
              }`}>
                <span className={`text-4xl transition-all duration-300 ${
                  publishedVideo.status === 'PUBLISHED' ? 'animate-bounce' : ''
                }`}>
                  {publishedVideo.status === 'PUBLISHED' ? '🎉' : '⚙️'}
                </span>
              </div>
              <h2 className={`text-3xl font-bold text-gray-900 transition-colors duration-300 ${
                publishedVideo.status === 'PUBLISHED' ? 'text-green-800' : ''
              }`}>
                {publishedVideo.status === 'PUBLISHED' ? 'Video published!' : 'Video uploaded!'}
              </h2>
              <p className="text-gray-600">
                {publishedVideo.status === 'PUBLISHED' 
                  ? 'Your video is now live and ready to be shared.'
                  : 'Your video is being processed and will be published once ready.'
                }
              </p>
              {publishedVideo.status === 'PROCESSING' && (
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
                  <div className="space-y-4">
                    {/* Main Status */}
                    <div className="flex items-center gap-3 text-blue-800">
                      <div className="w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
                      <span className="text-base font-semibold">Mux is processing your video</span>
                    </div>
                    
                    {/* Processing Steps */}
                    <div className="space-y-3 ml-6">
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span className="text-sm text-gray-700">✅ Upload completed successfully</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                        <span className="text-sm text-blue-700">🔄 Creating optimized video formats</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
                        <span className="text-sm text-gray-500">⏳ Generating thumbnails</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
                        <span className="text-sm text-gray-500">📊 Extracting metadata</span>
                      </div>
                    </div>
                    
                    {/* Status Info */}
                    <div className="bg-white/60 rounded-lg p-3 border border-blue-100">
                      <p className="text-blue-700 text-sm">
                        <span className="font-medium">Processing typically takes 2-5 minutes</span> depending on video length and quality.
                      </p>
                      <div className="flex items-center gap-2 mt-2">
                        {isPollingStatus ? (
                          <>
                            <div className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-ping"></div>
                            <span className="text-blue-600 text-xs font-medium">We're monitoring progress automatically</span>
                          </>
                        ) : (
                          <>
                            <div className="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                            <span className="text-gray-600 text-xs">Refresh the page to check current status</span>
                          </>
                        )}
                      </div>
                    </div>
                    
                    {/* What happens next */}
                    <div className="text-xs text-blue-600 border-t border-blue-100 pt-3">
                      💡 <span className="font-medium">What happens next:</span> Once processing completes, your video will be automatically published and available for viewing. You'll see the status update here and in your content table.
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Video Preview Card */}
            <div className="relative">
              <div className="absolute -inset-1 bg-gradient-to-r from-green-400 to-blue-400 rounded-2xl blur-lg opacity-20"></div>
              <div className="relative bg-white/90 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                <div className="flex items-center gap-4">
                  <div className="relative">
                    <div className="w-32 h-20 bg-gray-200 rounded-lg overflow-hidden">
                      {publishedVideo.thumbnail && publishedVideo.thumbnail !== '/api/placeholder/320/180' ? (
                        <img 
                          src={publishedVideo.thumbnail} 
                          alt="Video thumbnail"
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full bg-gradient-to-br from-gray-300 to-gray-400 flex items-center justify-center">
                          <span className="text-2xl">🎥</span>
                        </div>
                      )}
                    </div>
                    <div className="absolute bottom-1 right-1 bg-black/70 text-white text-xs px-1 rounded">
                      {publishedVideo.duration}
                    </div>
                  </div>
                  <div className="flex-1 text-left">
                    <h3 className="font-bold text-gray-900 text-lg">{publishedVideo.title}</h3>
                    <p className="text-gray-500 text-sm">Uploaded {publishedVideo.uploadDate}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Share Section */}
            <div className="space-y-4">
              <h3 className="text-xl font-semibold text-gray-900">
                {publishedVideo.status === 'PUBLISHED' ? 'Share your video' : 'Video details'}
              </h3>
              
              {/* Share buttons only if published */}
              {publishedVideo.status === 'PUBLISHED' && (
                <div className="flex justify-center gap-4 flex-wrap">
                  <button className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center hover:scale-105 transition-transform">
                    <span className="text-white text-xl">💬</span>
                  </button>
                  <button className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center hover:scale-105 transition-transform">
                    <span className="text-white text-xl">f</span>
                  </button>
                  <button className="w-16 h-16 bg-black rounded-full flex items-center justify-center hover:scale-105 transition-transform">
                    <span className="text-white text-xl">𝕏</span>
                  </button>
                  <button className="w-16 h-16 bg-gray-600 rounded-full flex items-center justify-center hover:scale-105 transition-transform">
                    <span className="text-white text-xl">✉️</span>
                  </button>
                  <button className="w-16 h-16 bg-orange-600 rounded-full flex items-center justify-center hover:scale-105 transition-transform">
                    <span className="text-white text-xl">R</span>
                  </button>
                </div>
              )}

              {/* Video Link */}
              <div className="bg-gray-100 rounded-xl p-4">
                <p className="text-sm font-medium text-gray-700 mb-2">
                  {publishedVideo.status === 'PUBLISHED' ? 'Video link' : 'Video link (will be available after processing)'}
                </p>
                <div className="flex items-center gap-3">
                  <input
                    type="text"
                    value={publishedVideo.url}
                    readOnly
                    className={`flex-1 p-3 bg-white border border-gray-300 rounded-lg text-sm ${
                      publishedVideo.status === 'PUBLISHED' ? 'text-blue-600' : 'text-gray-500'
                    }`}
                  />
                  <button
                    onClick={copyVideoLink}
                    disabled={publishedVideo.status !== 'PUBLISHED'}
                    className={`p-3 rounded-lg transition-colors ${
                      publishedVideo.status === 'PUBLISHED' 
                        ? 'bg-gray-200 hover:bg-gray-300' 
                        : 'bg-gray-100 cursor-not-allowed opacity-50'
                    }`}
                    title={publishedVideo.status === 'PUBLISHED' ? 'Copy link' : 'Link will be available after processing'}
                  >
                    <span className="text-gray-700">📋</span>
                  </button>
                </div>
                {publishedVideo.status === 'PROCESSING' && (
                  <p className="text-xs text-gray-500 mt-2">
                    💡 The video link will become active once processing is complete
                  </p>
                )}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-4 justify-center">
              <button
                onClick={() => window.location.href = '/content'}
                className="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-xl hover:shadow-lg transition-all"
              >
                {publishedVideo.status === 'PUBLISHED' ? 'View in Content' : 'Manage Video'}
              </button>
              <button
                onClick={handleClose}
                className="px-6 py-3 border border-gray-300 text-gray-700 font-semibold rounded-xl hover:bg-gray-50 transition-all"
              >
                {publishedVideo.status === 'PUBLISHED' ? 'Close' : 'Done'}
              </button>
            </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="h-full flex flex-col overflow-hidden">
      {/* Header with Steps */}
      <div className="flex-shrink-0 px-8 py-4">
        {/* Title Section */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-6">
            <button
              onClick={handleClose}
              className="p-3 hover:bg-gray-100/50 rounded-full transition-all duration-200 hover:scale-105"
              title="Close upload"
            >
              <XMarkIcon className="w-6 h-6 text-gray-500" />
            </button>
            <div className="flex flex-col gap-1">
              <h2 className="text-2xl font-bold text-gray-900 leading-tight tracking-tight">Upload Content</h2>
              {!isInitialUpload && (
                <p className="text-gray-500 font-medium">Step {currentStep} of {steps.length}</p>
              )}
            </div>
          </div>
        </div>
        
        {/* Progress Steps - Centered with Optical Balance */}
        {!isInitialUpload && (
        <div className="flex items-center justify-center">
          <div className="flex items-center gap-8">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                {/* Step Circle with Perfect Alignment */}
                <div className="flex flex-col items-center gap-2">
                  <div className={`rounded-full flex items-center justify-center text-sm font-semibold transition-all duration-300 ${
                    currentStep >= step.id 
                      ? 'bg-purple-600 text-white shadow-lg scale-110' 
                      : 'bg-gray-200 text-gray-600'
                  }`} style={{ 
                    borderRadius: '50%', 
                    width: '40px', 
                    height: '40px',
                    minWidth: '40px', 
                    minHeight: '40px'
                  }}>
                    {step.id}
                  </div>
                  
                  {/* Step Label - Optically Centered */}
                  <div className="text-center">
                    <div className={`text-sm font-semibold transition-colors duration-300 ${
                      currentStep >= step.id ? 'text-purple-600' : 'text-gray-500'
                    }`}>
                      {step.title}
                    </div>
                    <div className="text-xs text-gray-400 mt-0.5 leading-tight">
                      {step.description}
                    </div>
                  </div>
                </div>
                
                {/* Connection Line */}
                {index < steps.length - 1 && (
                  <div className="flex items-center mx-6 mb-6">
                    <div className={`h-0.5 w-16 transition-colors duration-300 ${
                      currentStep > step.id ? 'bg-purple-600' : 'bg-gray-300'
                    }`} />
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
        )}
      </div>

      {/* Content Area */}
      <div className="flex-1 overflow-y-auto border-t border-white/20">
        <div className="px-8 py-6">
        {/* Initial Upload Screen - Unnumbered */}
        {isInitialUpload && (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-xl font-bold text-gray-900 mb-2">Select files to upload</h3>
              <p className="text-gray-600">Upload a single video to use the guided wizard, or multiple videos for batch processing.</p>
              <div className="bg-blue-50 rounded-lg p-3 mt-4 border border-blue-200">
                <p className="text-blue-800 text-sm">
                  💡 <span className="font-medium">How it works:</span> After upload, your video will be saved as a draft in your content table. You can exit anytime and complete the publishing flow later.
                </p>
              </div>
            </div>

            {/* Upload Area */}
            <div className="relative group">
              <div className="absolute -inset-1 bg-gradient-to-r from-purple-400 to-pink-400 rounded-2xl blur-lg opacity-10 group-hover:opacity-20 transition-opacity"></div>
              <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl border-2 border-dashed border-gray-300 hover:border-purple-400 transition-all p-12 text-center">
                <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center">
                  <span className="text-3xl">📁</span>
                </div>
                <h4 className="text-xl font-bold text-gray-900 mb-3">Drag and drop video files to upload</h4>
                <p className="text-gray-600 mb-6">Your videos will be private until you publish them</p>
                <input
                  type="file"
                  multiple
                  accept="video/*"
                  onChange={(e) => e.target.files && handleFileUpload(e.target.files)}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                />
                <button className="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-xl hover:shadow-lg transition-all">
                  SELECT FILES
                </button>
              </div>
            </div>

            {/* Upload Status - Fixed Position */}
            {uploadedFiles.length > 0 && (
              <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2 z-50 max-w-md">
                <div className="bg-white/95 backdrop-blur-xl rounded-xl p-3 border border-white/50 shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-purple-100 to-pink-100 rounded-lg flex items-center justify-center">
                      <span className="text-sm">🎥</span>
                    </div>
                    <div className="flex-1 min-w-0">
                      <h5 className="font-medium text-gray-900 truncate text-sm">{uploadedFiles[0]?.name}</h5>
                      <div className="flex items-center gap-2 mt-1">
                        <div className="flex-1 bg-gray-200 rounded-full h-1.5">
                          <div 
                            className={`h-1.5 rounded-full transition-all ${
                              uploadedFiles[0]?.status === 'error' 
                                ? 'bg-red-500' 
                                : 'bg-gradient-to-r from-purple-600 to-pink-600'
                            }`}
                            style={{ width: `${uploadedFiles[0]?.progress || 0}%` }}
                          />
                        </div>
                        <span className={`text-xs font-medium whitespace-nowrap ${
                          uploadedFiles[0]?.status === 'error' ? 'text-red-600' : 'text-purple-600'
                        }`}>
                          {uploadedFiles[0]?.status === 'completed' ? '✅ Ready' :
                           uploadedFiles[0]?.status === 'error' ? '❌ Failed' :
                           uploadedFiles[0]?.status === 'processing' ? '⚙️ Processing...' :
                           uploadedFiles[0]?.status === 'uploading' ? `${Math.round(uploadedFiles[0]?.progress || 0)}%` :
                           'Starting...'}
                        </span>
                      </div>
                      {requestUploadUrl.isPending && (
                        <div className="text-xs text-gray-500 mt-1">Preparing upload...</div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Step 1: Details */}
        {!isInitialUpload && currentStep === 1 && (
          <div className="max-w-4xl mx-auto space-y-4">
            <div className="text-center">
              <h3 className="text-xl font-bold text-gray-900 mb-2">Add details</h3>
              <p className="text-gray-600">Add a title, description and thumbnail for your video</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
              {/* Video Preview */}
              <div className="lg:col-span-1">
                <div className="relative">
                  <div className="absolute -inset-1 bg-gradient-to-r from-purple-400 to-pink-400 rounded-2xl blur-lg opacity-10"></div>
                  <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-3 border border-white/50">
                    <div className="aspect-video bg-gray-100 rounded-lg mb-4 flex items-center justify-center overflow-hidden">
                      {videoDetails.thumbnail ? (
                        <img 
                          src={videoDetails.thumbnail} 
                          alt="Video thumbnail"
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <span className="text-4xl">🎥</span>
                      )}
                    </div>
                    <h4 className="font-semibold text-gray-900 mb-2">Thumbnail</h4>
                    <div className="grid grid-cols-3 gap-2">
                      {[1,2,3].map(i => {
                        const thumbnailIndex = i - 1 // Convert to 0-based index
                        const thumbnailSrc = videoDetails.thumbnailOptions[thumbnailIndex]
                        const isSelected = selectedThumbnail === i
                        
                        return (
                          <div 
                            key={i} 
                            onClick={() => {
                              setSelectedThumbnail(i)
                              // Update the main thumbnail when user selects an option
                              if (thumbnailSrc) {
                                setVideoDetails(prev => ({ ...prev, thumbnail: thumbnailSrc }))
                              }
                            }}
                            className={`aspect-video bg-gray-100 rounded border-2 cursor-pointer transition-colors overflow-hidden ${
                              isSelected ? 'border-purple-400 bg-purple-50' : 'border-transparent hover:border-purple-400'
                            }`}
                          >
                            {thumbnailSrc ? (
                              <div className="relative w-full h-full">
                                <img 
                                  src={thumbnailSrc} 
                                  alt={`Thumbnail option ${i}`}
                                  className="w-full h-full object-cover"
                                />
                                {isSelected && (
                                  <div className="absolute inset-0 bg-purple-400/20 flex items-center justify-center">
                                    <span className="text-purple-600 text-lg font-bold">✓</span>
                                  </div>
                                )}
                              </div>
                            ) : (
                              <div className="w-full h-full flex items-center justify-center text-gray-600">
                                {isSelected ? '✓' : i}
                              </div>
                            )}
                          </div>
                        )
                      })}
                    </div>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleCustomThumbnailUpload}
                      className="hidden"
                      id="custom-thumbnail-upload"
                    />
                    <label
                      htmlFor="custom-thumbnail-upload"
                      className="w-full mt-3 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium text-gray-700 cursor-pointer flex items-center justify-center gap-2"
                    >
                      <span>📁</span>
                      Upload custom thumbnail
                    </label>
                    {videoDetails.thumbnailOptions.length > 0 && (
                      <p className="text-xs text-green-600 mt-2 text-center">
                        ✅ {videoDetails.thumbnailOptions.length} thumbnail{videoDetails.thumbnailOptions.length > 1 ? 's' : ''} generated
                      </p>
                    )}
                  </div>
                </div>
              </div>

              {/* Details Form */}
              <div className="lg:col-span-2 space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Title (required)</label>
                  <input
                    type="text"
                    value={videoDetails.title}
                    onChange={(e) => setVideoDetails(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="Add a title that describes your video"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-300 focus:border-purple-300 bg-white text-gray-900 placeholder-gray-500"
                  />
                  <div className="text-xs text-gray-500 mt-1">{videoDetails.title.length}/100</div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                  <textarea
                    value={videoDetails.description}
                    onChange={(e) => setVideoDetails(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Tell viewers about your video"
                    rows={6}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-300 focus:border-purple-300 resize-none bg-white text-gray-900 placeholder-gray-500"
                  />
                  <div className="text-xs text-gray-500 mt-1">{videoDetails.description.length}/5000</div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                    <CustomDropdown
                      options={categoryOptions}
                      value={videoDetails.category}
                      onChange={(value) => setVideoDetails(prev => ({ ...prev, category: value }))}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Language</label>
                    <CustomDropdown
                      options={languageOptions}
                      value={videoDetails.language}
                      onChange={(value) => setVideoDetails(prev => ({ ...prev, language: value }))}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Playlist</label>
                  <CustomDropdown
                    options={playlistOptions}
                    value={videoDetails.playlist || ""}
                    onChange={(value) => setVideoDetails(prev => ({ ...prev, playlist: value }))}
                  />
                  <div className="text-xs text-gray-500 mt-1">Add your video to a playlist to organize your content</div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Tags</label>
                  {videoDetails.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-2">
                      {videoDetails.tags.map((tag, index) => (
                        <span 
                          key={index}
                          className="inline-flex items-center gap-1 px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm"
                        >
                          {tag}
                          <button 
                            onClick={() => removeTag(tag)}
                            className="hover:text-purple-600"
                          >
                            ×
                          </button>
                        </span>
                      ))}
                    </div>
                  )}
                  <input
                    type="text"
                    value={tagInput}
                    onChange={handleTagInputChange}
                    onKeyDown={handleTagInputKeyPress}
                    placeholder="Add tags separated by commas or press Enter"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-300 focus:border-purple-300 bg-white text-gray-900 placeholder-gray-500"
                  />
                  <div className="text-xs text-gray-500 mt-1">Tags help people find your video. Press Enter or comma to add.</div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Step 2: Visibility */}
        {!isInitialUpload && currentStep === 2 && (
          <div className="max-w-3xl mx-auto space-y-6">
            <div className="text-center">
              <h3 className="text-xl font-bold text-gray-900 mb-2">Visibility</h3>
              <p className="text-gray-600">Choose when to publish and who can see your video</p>
            </div>

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Save or publish</label>
                <CustomDropdown
                  options={visibilityOptions}
                  value={visibilitySettings.visibility}
                  onChange={(value) => setVisibilitySettings(prev => ({ ...prev, visibility: value as any }))}
                />
                <div className="mt-2 text-sm text-gray-600">
                  {visibilitySettings.visibility === 'public' && "Everyone can search for and view"}
                  {visibilitySettings.visibility === 'unlisted' && "Anyone with the link can view"}
                  {visibilitySettings.visibility === 'private' && "Only you can view"}
                </div>
              </div>

              <div className="space-y-4">
                <div className="p-4 bg-blue-50 rounded-xl border border-blue-200">
                  <h4 className="font-semibold text-gray-900 mb-2">Audience</h4>
                  <p className="text-sm text-gray-600 mb-3">You're legally required to tell us whether your videos are made for kids.</p>
                  <div className="flex items-center justify-between">
                    <div>
                      <span className="font-medium text-gray-900">Is this video made for kids?</span>
                      <p className="text-sm text-gray-600">This affects features like personalized ads and notifications</p>
                    </div>
                    <ToggleSwitch
                      checked={visibilitySettings.isForKids}
                      onChange={(checked) => setVisibilitySettings(prev => ({ ...prev, isForKids: checked }))}
                    />
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-medium text-gray-900">Allow comments</span>
                    <p className="text-sm text-gray-600">Viewers can comment on your video</p>
                  </div>
                  <ToggleSwitch
                    checked={visibilitySettings.allowComments}
                    onChange={(checked) => setVisibilitySettings(prev => ({ ...prev, allowComments: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-medium text-gray-900">Allow ratings</span>
                    <p className="text-sm text-gray-600">Viewers can like or dislike your video</p>
                  </div>
                  <ToggleSwitch
                    checked={visibilitySettings.allowRatings}
                    onChange={(checked) => setVisibilitySettings(prev => ({ ...prev, allowRatings: checked }))}
                  />
                </div>
              </div>
            </div>
          </div>
        )}


            {/* Processing Status */}
            <div className="relative">
              <div className="absolute -inset-1 bg-gradient-to-r from-blue-400 to-purple-400 rounded-2xl blur-lg opacity-10"></div>
              <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                <h4 className="font-bold text-gray-900 mb-4 flex items-center gap-2">
                  <span className="w-4 h-4 bg-blue-500 rounded-full animate-pulse"></span>
                  Video Processing
                </h4>
                <div className="space-y-4">
                  {/* Upload Complete */}
                  <div className="flex items-center gap-3">
                    {processingStages.upload ? (
                      <>
                        <span className="text-green-600 text-sm">✅</span>
                        <span className="text-sm text-gray-700">Video uploaded successfully</span>
                      </>
                    ) : (
                      <>
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm text-gray-700">Uploading video...</span>
                      </>
                    )}
                  </div>
                  
                  {/* Thumbnail Generation */}
                  <div className="flex items-center gap-3">
                    {processingStages.thumbnails ? (
                      <>
                        <span className="text-green-600 text-sm">✅</span>
                        <span className="text-sm text-gray-700">Video thumbnails generated</span>
                      </>
                    ) : processingStages.upload ? (
                      <>
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm text-gray-700">Extracting video thumbnails...</span>
                      </>
                    ) : (
                      <>
                        <div className="w-4 h-4 border-2 border-gray-300 border-t-transparent rounded-full"></div>
                        <span className="text-sm text-gray-500">Waiting for video upload...</span>
                      </>
                    )}
                  </div>

                  {/* Video Processing */}
                  <div className="flex items-center gap-3">
                    {processingStages.processing ? (
                      <>
                        <span className="text-green-600 text-sm">✅</span>
                        <span className="text-sm text-gray-700">Video processing complete</span>
                      </>
                    ) : processingStages.thumbnails ? (
                      <>
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm text-gray-700">Processing video for streaming...</span>
                      </>
                    ) : (
                      <>
                        <div className="w-4 h-4 border-2 border-gray-300 border-t-transparent rounded-full"></div>
                        <span className="text-sm text-gray-500">Waiting for video processing...</span>
                      </>
                    )}
                  </div>

                  {/* Content Moderation */}
                  <div className="flex items-center gap-3">
                    {processingStages.moderation ? (
                      <>
                        <span className="text-green-600 text-sm">✅</span>
                        <span className="text-sm text-gray-700">AI content moderation complete</span>
                      </>
                    ) : processingStages.processing ? (
                      <>
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm text-gray-700">Running AI content checks...</span>
                      </>
                    ) : (
                      <>
                        <div className="w-4 h-4 border-2 border-gray-300 border-t-transparent rounded-full"></div>
                        <span className="text-sm text-gray-500">Waiting for video processing...</span>
                      </>
                    )}
                  </div>
                </div>
                
                <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                  <p className="text-sm text-blue-800">
                    <strong>What's happening:</strong> We're processing your video to ensure optimal quality and checking it meets our community guidelines. This usually takes 1-2 minutes.
                  </p>
                </div>

                {/* Manual override for stuck processing */}
                {!processingStages.moderation && (
                  <div className="mt-4 text-center">
                    <button
                      onClick={() => {
                        console.log('🚀 Manual override: marking processing as complete')
                        setProcessingStages(prev => ({
                          ...prev,
                          processing: true,
                          moderation: true
                        }))
                      }}
                      className="text-sm text-purple-600 hover:text-purple-700 underline"
                    >
                      Processing taking too long? Continue anyway →
                    </button>
                  </div>
                )}
              </div>
            </div>

            {/* Community Guidelines Notice */}
            <div className="relative">
              <div className="absolute -inset-1 bg-gradient-to-r from-amber-400 to-orange-400 rounded-2xl blur-lg opacity-10"></div>
              <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                <h4 className="font-bold text-gray-900 mb-4 flex items-center gap-2">
                  <span className="text-amber-600">⚠️</span>
                  Content Review
                </h4>
                <div className="space-y-3 text-sm text-gray-700">
                  <p>Your video is being automatically checked for:</p>
                  <ul className="list-disc list-inside space-y-1 ml-4">
                    <li>Copyright violations</li>
                    <li>Community guidelines compliance</li>
                    <li>Age-appropriate content</li>
                    <li>Technical quality</li>
                  </ul>
                  <p className="text-xs text-gray-600 mt-3">
                    Videos that don't meet our standards may be removed or have limited visibility.
                  </p>
                </div>
              </div>
            </div>

            {/* Processing Status Info */}
            <div className="text-center">
              {processingStages.moderation ? (
                <div className="flex items-center justify-center gap-3 text-green-600">
                  <div className="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xs">✓</span>
                  </div>
                  <span className="font-medium">Processing complete! Ready to continue.</span>
                </div>
              ) : (
                <div className="flex items-center justify-center gap-3 text-gray-500">
                  <div className="w-5 h-5 border-2 border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                  <span>Processing... Please wait</span>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Step 3: Preview */}
        {!isInitialUpload && currentStep === 3 && (
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="text-center">
              <h3 className="text-xl font-bold text-gray-900 mb-2">Preview your video</h3>
              <p className="text-gray-600">Review your video and accept our terms before publishing</p>
            </div>

            {/* Video Preview & Details - Main Content */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Video Details - Left Side */}
              <div className="relative">
                <div className="absolute -inset-1 bg-gradient-to-r from-blue-400 to-purple-400 rounded-2xl blur-lg opacity-10"></div>
                <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                  <h4 className="font-bold text-gray-900 mb-4">Video Details</h4>
                  <div className="space-y-4">
                    <div>
                      <span className="text-sm font-medium text-gray-600">Title:</span>
                      <p className="text-gray-900 font-medium">{videoDetails.title || 'Untitled'}</p>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Description:</span>
                      <p className="text-gray-700 text-sm mt-1 line-clamp-3">
                        {videoDetails.description || 'No description provided'}
                      </p>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <span className="text-sm font-medium text-gray-600">Visibility:</span>
                        <p className="text-gray-900 capitalize">{visibilitySettings.visibility}</p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-600">Audience:</span>
                        <p className="text-gray-900">{visibilitySettings.isForKids ? 'Kids' : 'General'}</p>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <span className="text-sm font-medium text-gray-600">Category:</span>
                        <p className="text-gray-900">{categoryOptions.find(c => c.value === videoDetails.category)?.label}</p>
                      </div>
                      <div>
                        <span className="text-sm font-medium text-gray-600">Language:</span>
                        <p className="text-gray-900">{languageOptions.find(l => l.value === videoDetails.language)?.label}</p>
                      </div>
                    </div>
                    
                    {videoDetails.playlist && (
                      <div>
                        <span className="text-sm font-medium text-gray-600">Playlist:</span>
                        <p className="text-gray-900">{playlistOptions.find(p => p.value === videoDetails.playlist)?.label}</p>
                      </div>
                    )}
                    
                    <div>
                      <span className="text-sm font-medium text-gray-600">Tags:</span>
                      {videoDetails.tags.length > 0 ? (
                        <div className="flex flex-wrap gap-1 mt-1">
                          {videoDetails.tags.slice(0, 4).map((tag, index) => (
                            <span key={index} className="inline-block px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs">
                              {tag}
                            </span>
                          ))}
                          {videoDetails.tags.length > 4 && (
                            <span className="inline-block px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs">
                              +{videoDetails.tags.length - 4} more
                            </span>
                          )}
                        </div>
                      ) : (
                        <p className="text-gray-500 text-sm">No tags added</p>
                      )}
                    </div>
                  </div>
                </div>
              </div>

              {/* Video Preview - Right Side */}
              <div className="relative">
                <div className="absolute -inset-1 bg-gradient-to-r from-purple-400 to-pink-400 rounded-2xl blur-lg opacity-10"></div>
                <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                  <h4 className="font-bold text-gray-900 mb-4">Video Preview</h4>
                  
                  {/* Video Preview Window */}
                  <div className="aspect-video bg-gray-900 rounded-xl mb-4 relative overflow-hidden">
                    {videoFileForPreview ? (
                      <video
                        className="w-full h-full object-cover rounded-xl bg-black"
                        controls
                        preload="metadata"
                        poster={videoDetails.thumbnail || undefined}
                        controlsList="nodownload"
                        onLoadedMetadata={(e) => {
                          console.log('Video loaded for preview, duration:', e.currentTarget.duration)
                        }}
                        onError={(e) => {
                          console.error('Video preview error:', e)
                        }}
                        style={{
                          maxHeight: '100%',
                          maxWidth: '100%'
                        }}
                      >
                        <source 
                          src={URL.createObjectURL(videoFileForPreview)} 
                          type={videoFileForPreview.type}
                        />
                        <p className="text-white text-center p-4">
                          Your browser does not support the video tag. Please use a modern browser to preview your video.
                        </p>
                      </video>
                    ) : uploadedFiles[0] ? (
                      // Fallback to thumbnail view if video file not available
                      <div className="w-full h-full relative">
                        {videoDetails.thumbnail ? (
                          <img 
                            src={videoDetails.thumbnail} 
                            alt="Video thumbnail"
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="absolute inset-0 bg-gradient-to-br from-gray-800 to-gray-900" />
                        )}
                        
                        {/* Duration Overlay */}
                        {videoDetails.duration && (
                          <div className="absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded">
                            {formatDuration(videoDetails.duration)}
                          </div>
                        )}
                        
                        {/* File Info Overlay */}
                        <div className="absolute inset-0 bg-black/30 flex items-center justify-center">
                          <div className="text-center">
                            <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mb-3 mx-auto">
                              <span className="text-3xl">🎥</span>
                            </div>
                            <p className="text-white text-sm font-medium drop-shadow-lg">{uploadedFiles[0].name}</p>
                            <p className="text-gray-200 text-xs mt-1 drop-shadow-lg">
                              {(uploadedFiles[0].size / (1024 * 1024)).toFixed(1)} MB
                            </p>
                            <p className="text-gray-300 text-xs mt-1">Video preview not available</p>
                          </div>
                        </div>
                      </div>
                    ) : (
                      // No video uploaded state
                      <div className="w-full h-full bg-gradient-to-br from-gray-800 to-gray-900 flex items-center justify-center">
                        <div className="text-center">
                          <span className="text-4xl mb-2 block">🎥</span>
                          <p className="text-gray-400 text-sm">No video uploaded</p>
                        </div>
                      </div>
                    )}
                    
                    {/* Video Status Overlay */}
                    <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-3">
                      <div className="flex items-center gap-2">
                        {uploadedFiles[0]?.status === 'completed' ? (
                          <>
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            <span className="text-white text-xs">Ready to publish</span>
                          </>
                        ) : (
                          <>
                            <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                            <span className="text-white text-xs">Processing...</span>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  {/* Video Information */}
                  {videoFileForPreview && (
                    <div className="bg-gray-50 rounded-lg p-3 mb-3">
                      <h5 className="font-medium text-gray-900 mb-2">Video Information</h5>
                      <div className="space-y-1 text-sm text-gray-600">
                        <div className="flex justify-between">
                          <span>File size:</span>
                          <span>{(videoFileForPreview.size / (1024 * 1024)).toFixed(1)} MB</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Format:</span>
                          <span>{videoFileForPreview.type}</span>
                        </div>
                        {videoDetails.duration && (
                          <div className="flex justify-between">
                            <span>Duration:</span>
                            <span>{formatDuration(videoDetails.duration)}</span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  <div className="text-xs text-gray-500 text-center">
                    💡 Use the player above to preview how your video will appear to viewers
                  </div>
                </div>
              </div>
            </div>

            {/* Content Checks */}
            <div className="relative">
              <div className="absolute -inset-1 bg-gradient-to-r from-green-400 to-blue-400 rounded-2xl blur-lg opacity-10"></div>
              <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                <h4 className="font-bold text-gray-900 mb-4 flex items-center gap-2">
                  <span className="text-green-600">✓</span>
                  Content Checks
                </h4>
                <div className="space-y-3">
                  {/* Basic validation checks */}
                  <div className="flex items-center gap-3">
                    <span className="text-green-600 text-sm">✅</span>
                    <span className="text-sm text-gray-700">Video uploaded successfully</span>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    {videoDetails.title.trim() ? (
                      <>
                        <span className="text-green-600 text-sm">✅</span>
                        <span className="text-sm text-gray-700">Title provided</span>
                      </>
                    ) : (
                      <>
                        <span className="text-red-600 text-sm">❌</span>
                        <span className="text-sm text-red-700">Title is required</span>
                      </>
                    )}
                  </div>

                  <div className="flex items-center gap-3">
                    {videoDetails.description.length > 0 ? (
                      <>
                        <span className="text-green-600 text-sm">✅</span>
                        <span className="text-sm text-gray-700">Description added</span>
                      </>
                    ) : (
                      <>
                        <span className="text-amber-600 text-sm">⚠️</span>
                        <span className="text-sm text-amber-700">Consider adding a description for better discoverability</span>
                      </>
                    )}
                  </div>

                  <div className="flex items-center gap-3">
                    {videoDetails.tags.length > 0 ? (
                      <>
                        <span className="text-green-600 text-sm">✅</span>
                        <span className="text-sm text-gray-700">{videoDetails.tags.length} tags added</span>
                      </>
                    ) : (
                      <>
                        <span className="text-amber-600 text-sm">⚠️</span>
                        <span className="text-sm text-amber-700">Consider adding tags to help viewers find your video</span>
                      </>
                    )}
                  </div>

                  <div className="flex items-center gap-3">
                    {visibilitySettings.visibility === 'public' ? (
                      <>
                        <span className="text-blue-600 text-sm">🌍</span>
                        <span className="text-sm text-gray-700">Video will be public</span>
                      </>
                    ) : (
                      <>
                        <span className="text-gray-600 text-sm">🔒</span>
                        <span className="text-sm text-gray-700">Video will be {visibilitySettings.visibility}</span>
                      </>
                    )}
                  </div>

                  <div className="flex items-center gap-3">
                    <span className="text-green-600 text-sm">✅</span>
                    <span className="text-sm text-gray-700">
                      Content suitable for {visibilitySettings.isForKids ? 'kids' : 'general audiences'}
                    </span>
                  </div>
                </div>
                
                <div className="mt-4 text-xs text-gray-500">
                  💡 These are basic content checks. Your video may be reviewed after publishing.
                </div>
              </div>
            </div>

            {/* Terms and Community Guidelines */}
            <div className="relative">
              <div className="absolute -inset-1 bg-gradient-to-r from-red-400 to-pink-400 rounded-2xl blur-lg opacity-10"></div>
              <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                <h4 className="font-bold text-gray-900 mb-4 flex items-center gap-2">
                  <span className="text-red-600">📋</span>
                  Terms & Guidelines
                </h4>
                
                <div className="space-y-4">
                  <div className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      id="terms-checkbox"
                      checked={acceptedTerms}
                      onChange={(e) => setAcceptedTerms(e.target.checked)}
                      className="mt-1 w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500"
                    />
                    <label htmlFor="terms-checkbox" className="text-sm text-gray-700">
                      I agree to the <a href="/terms" target="_blank" className="text-purple-600 hover:underline">Terms of Service</a> and acknowledge that my video content will be subject to these terms.
                    </label>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      id="guidelines-checkbox"
                      checked={acceptedGuidelines}
                      onChange={(e) => setAcceptedGuidelines(e.target.checked)}
                      className="mt-1 w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500"
                    />
                    <label htmlFor="guidelines-checkbox" className="text-sm text-gray-700">
                      I confirm that my video complies with our <a href="/community-guidelines" target="_blank" className="text-purple-600 hover:underline">Community Guidelines</a> and does not contain prohibited content.
                    </label>
                  </div>
                  
                  <div className="bg-amber-50 border border-amber-200 rounded-lg p-3 mt-4">
                    <p className="text-sm text-amber-800">
                      <strong>Important:</strong> By publishing this video, you confirm that:
                    </p>
                    <ul className="text-xs text-amber-700 mt-2 space-y-1 ml-4 list-disc">
                      <li>You own all rights to this content or have permission to use it</li>
                      <li>The content is appropriate for all audiences or properly labeled</li>
                      <li>You understand that inappropriate content may be removed</li>
                      <li>You agree to our content moderation policies</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Step 4: Publish */}
        {!isInitialUpload && currentStep === 4 && (
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="text-center">
              <h3 className="text-xl font-bold text-gray-900 mb-2">Ready to publish</h3>
              <p className="text-gray-600">Final review before your video goes live</p>
            </div>

            {/* Final Review Summary */}
            <div className="relative">
              <div className="absolute -inset-1 bg-gradient-to-r from-green-400 to-blue-400 rounded-2xl blur-lg opacity-10"></div>
              <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl p-6 border border-white/50">
                <h4 className="font-bold text-gray-900 mb-4 flex items-center gap-2">
                  <span className="text-green-600">✅</span>
                  Ready to Publish
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Video Summary */}
                  <div>
                    <h5 className="font-medium text-gray-900 mb-3">Video Details</h5>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Title:</span>
                        <span className="font-medium text-gray-900">{videoDetails.title || 'Untitled'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Visibility:</span>
                        <span className="font-medium text-gray-900 capitalize">{visibilitySettings.visibility}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Duration:</span>
                        <span className="font-medium text-gray-900">{videoDetails.duration ? formatDuration(videoDetails.duration) : 'N/A'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Category:</span>
                        <span className="font-medium text-gray-900">{categoryOptions.find(c => c.value === videoDetails.category)?.label}</span>
                      </div>
                    </div>
                  </div>

                  {/* Compliance Status */}
                  <div>
                    <h5 className="font-medium text-gray-900 mb-3">Compliance Status</h5>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center gap-2">
                        <span className="text-green-600">✅</span>
                        <span className="text-gray-700">Video processing complete</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-green-600">✅</span>
                        <span className="text-gray-700">Content review passed</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-green-600">✅</span>
                        <span className="text-gray-700">Terms of Service accepted</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-green-600">✅</span>
                        <span className="text-gray-700">Community Guidelines accepted</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Final Warning */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <span className="text-blue-600 text-xl">ℹ️</span>
                <div>
                  <h5 className="font-medium text-blue-900 mb-1">Before you publish</h5>
                  <p className="text-sm text-blue-800">
                    Once published, your video will be available to viewers according to your visibility settings. 
                    You can always edit details, change visibility, or delete the video later from your content dashboard.
                  </p>
                </div>
              </div>
            </div>

            {/* Publish Button */}
            <div className="text-center">
              <button
                onClick={handlePublish}
                disabled={completeUpload.isPending}
                className="px-8 py-4 bg-gradient-to-r from-green-600 to-emerald-600 text-white font-bold rounded-xl hover:shadow-lg hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 transition-all duration-200 text-lg"
              >
                {completeUpload.isPending ? (
                  <div className="flex items-center gap-3">
                    <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    Publishing your video...
                  </div>
                ) : (
                  <div className="flex items-center gap-3">
                    <span className="text-xl">🚀</span>
                    Publish Video
                  </div>
                )}
              </button>
            </div>
          </div>
        )}
        </div>
      </div>

      {/* Footer with Navigation - Hide on initial upload and final step */}
      {!isInitialUpload && currentStep < 4 && (
        <div className="flex-shrink-0 border-t border-white/20 px-8 py-4 flex items-center justify-between bg-gradient-to-br from-slate-50 via-purple-50 to-pink-50">
          <div className="flex items-center gap-4">
            <button
              onClick={prevStep}
              className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 transition-all duration-200 font-medium hover:bg-gray-100/50 rounded-lg text-sm"
            >
              <ChevronLeftIcon className="w-4 h-4" />
              Back
            </button>
            
            {/* Processing Status in Footer */}
            {draftVideoId && (!processingStages.processing || !processingStages.moderation) && (
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <div className="w-3 h-3 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                <span>Processing video in background...</span>
              </div>
            )}
          </div>

          <div className="flex items-center gap-3">
            {currentStep < steps.length ? (
              <>
                {/* Save as Draft - always available */}
                <button
                  onClick={handleClose}
                  className="flex items-center gap-2 px-4 py-2.5 border border-gray-300 text-gray-700 font-semibold rounded-xl hover:bg-gray-50 transition-all duration-200 text-sm"
                >
                  Save as Draft
                </button>
                
                <button
                  onClick={nextStep}
                  disabled={!canProceed()}
                  className="flex items-center gap-2 px-6 py-2.5 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-xl hover:shadow-lg hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 transition-all duration-200 text-sm"
                >
                  Continue
                  <ChevronRightIcon className="w-4 h-4" />
                </button>
              </>
            ) : (
              <>
                {/* Save as Draft - final step */}
                <button
                  onClick={handleClose}
                  className="flex items-center gap-2 px-4 py-2.5 border border-gray-300 text-gray-700 font-semibold rounded-xl hover:bg-gray-50 transition-all duration-200 text-sm"
                >
                  Save as Draft
                </button>
                
                <button
                  onClick={handlePublish}
                  disabled={completeUpload.isPending}
                  className="flex items-center gap-2 px-6 py-2.5 bg-gradient-to-r from-green-600 to-emerald-600 text-white font-semibold rounded-xl hover:shadow-lg hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 transition-all duration-200 text-sm"
                >
                  {completeUpload.isPending ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      Publishing...
                    </>
                  ) : (
                    <>
                      <span className="text-base">🚀</span>
                      Publish
                    </>
                  )}
                </button>
              </>
            )}
          </div>
        </div>
      )}

      {/* Step 4 Navigation */}
      {currentStep === 4 && (
        <div className="flex-shrink-0 border-t border-white/20 px-8 py-4 flex items-center justify-between bg-gradient-to-br from-slate-50 via-purple-50 to-pink-50">
          <button
            onClick={prevStep}
            className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 transition-all duration-200 font-medium hover:bg-gray-100/50 rounded-lg text-sm"
          >
            <ChevronLeftIcon className="w-4 h-4" />
            Back to Preview
          </button>

          <div className="flex items-center gap-3">
            <button
              onClick={handleClose}
              className="flex items-center gap-2 px-4 py-2.5 border border-gray-300 text-gray-700 font-semibold rounded-xl hover:bg-gray-50 transition-all duration-200 text-sm"
            >
              Save as Draft
            </button>
          </div>
        </div>
      )}
      
      {/* Processing Complete Notification Toast */}
      {showProcessingComplete && (
        <div className="fixed top-4 right-4 z-50 max-w-sm">
          <div className="bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-xl p-4 shadow-lg border border-green-400 animate-in slide-in-from-top-2 duration-300">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                <span className="text-lg">🎉</span>
              </div>
              <div className="flex-1">
                <h4 className="font-semibold text-sm">Video Published!</h4>
                <p className="text-green-100 text-xs mt-0.5">
                  Processing complete - your video is now live
                </p>
              </div>
              <button 
                onClick={() => setShowProcessingComplete(false)}
                className="text-white/80 hover:text-white text-lg"
              >
                ×
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}