"use client";

import React, { useState } from "react";
import {
  LanguageIcon,
  PlayIcon,
  CheckIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  PlusIcon,
  MagnifyingGlassIcon,
  AdjustmentsHorizontalIcon,
  DocumentTextIcon,
  SpeakerWaveIcon,
  GlobeAltIcon,
  SparklesIcon,
  ChatBubbleLeftRightIcon,
  ChevronDownIcon,
  ArrowTrendingUpIcon,
  ArrowTrendingDownIcon,
  BoltIcon,
  EyeIcon,
  CursorArrowRaysIcon,
  EllipsisVerticalIcon,
  FilmIcon,
} from "@heroicons/react/24/outline";

export default function SubtitlesPage() {
  const [selectedTab, setSelectedTab] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedVideos, setSelectedVideos] = useState<number[]>([]);
  const [showBulkActions, setShowBulkActions] = useState(false);


  const languages = [
    { code: "en", name: "English", videos: 125, flag: "ðŸ‡ºðŸ‡¸", accuracy: 98, color: "from-blue-500 to-indigo-500" },
    { code: "es", name: "Spanish", videos: 89, flag: "ðŸ‡ªðŸ‡¸", accuracy: 96, color: "from-orange-500 to-red-500" },
    { code: "fr", name: "French", videos: 67, flag: "ðŸ‡«ðŸ‡·", accuracy: 94, color: "from-purple-500 to-pink-500" },
    { code: "de", name: "German", videos: 45, flag: "ðŸ‡©ðŸ‡ª", accuracy: 95, color: "from-amber-500 to-yellow-500" },
    { code: "ja", name: "Japanese", videos: 23, flag: "ðŸ‡¯ðŸ‡µ", accuracy: 92, color: "from-emerald-500 to-teal-500" },
    { code: "ko", name: "Korean", videos: 18, flag: "ðŸ‡°ðŸ‡·", accuracy: 93, color: "from-cyan-500 to-blue-500" },
  ];

  // Enhanced video data with more realistic details
  const videos = [
    { 
      id: 1, 
      title: "It was over when I scouted the badlands", 
      channel: "Chaos Theory",
      thumbnail: "/api/placeholder/120/68",
      duration: "0:30",
      languageCount: 0,
      languages: [],
      status: "needs_attention",
      views: "45.2K",
      engagement: "-8%",
      autoGenerated: false,
      modifiedOn: "Mar 8, 2021",
      priority: "high"
    },
    { 
      id: 2, 
      title: "Imagine not using chaos reach", 
      channel: "Your Channel",
      thumbnail: "/api/placeholder/120/68",
      duration: "0:22",
      languageCount: 2,
      languages: ["EN", "ES"],
      status: "published",
      views: "32.1K",
      engagement: "+23%",
      autoGenerated: true,
      modifiedOn: "Oct 19, 2020",
      priority: "medium"
    },
    { 
      id: 3, 
      title: "200 IQ Ryze", 
      channel: "Your Channel",
      thumbnail: "/api/placeholder/120/68",
      duration: "0:32",
      languageCount: 1,
      languages: ["EN"],
      status: "processing",
      views: "28.7K",
      engagement: null,
      autoGenerated: true,
      modifiedOn: "Jan 28, 2019",
      priority: "low"
    },
    { 
      id: 4, 
      title: "Garen R cast time", 
      channel: "Your Channel",
      thumbnail: "/api/placeholder/120/68",
      duration: "0:52",
      languageCount: 0,
      languages: [],
      status: "draft",
      views: "67.3K",
      engagement: "-12%",
      autoGenerated: false,
      modifiedOn: "May 21, 2018",
      priority: "high"
    },
    { 
      id: 5, 
      title: "FIFA 17 FUT Goal of the week entry", 
      channel: "Your Channel",
      thumbnail: "/api/placeholder/120/68",
      duration: "0:35",
      languageCount: 3,
      languages: ["EN", "ES", "FR"],
      status: "published",
      views: "89.1K",
      engagement: "+31%",
      autoGenerated: false,
      modifiedOn: "Dec 14, 2020",
      priority: "low"
    },
    { 
      id: 6, 
      title: "Advanced React Patterns Deep Dive", 
      channel: "Your Channel",
      thumbnail: "/api/placeholder/120/68",
      duration: "1:45",
      languageCount: 0,
      languages: [],
      status: "needs_attention",
      views: "156.8K",
      engagement: "-15%",
      autoGenerated: false,
      modifiedOn: "Jan 15, 2024",
      priority: "high"
    },
    { 
      id: 7, 
      title: "TypeScript Tips & Tricks", 
      channel: "Your Channel",
      thumbnail: "/api/placeholder/120/68",
      duration: "0:58",
      languageCount: 4,
      languages: ["EN", "ES", "FR", "DE"],
      status: "published",
      views: "203.5K",
      engagement: "+27%",
      autoGenerated: true,
      modifiedOn: "Feb 2, 2024",
      priority: "low"
    },
    { 
      id: 8, 
      title: "Building Scalable APIs", 
      channel: "Your Channel",
      thumbnail: "/api/placeholder/120/68",
      duration: "2:15",
      languageCount: 1,
      languages: ["EN"],
      status: "review_needed",
      views: "91.4K",
      engagement: "+18%",
      autoGenerated: true,
      modifiedOn: "Jan 28, 2024",
      priority: "medium"
    }
  ];

  const getFilteredVideos = () => {
    let filtered = videos;
    
    // Apply tab filter
    switch (selectedTab) {
      case "drafts":
        filtered = filtered.filter(v => ["draft", "needs_attention", "processing", "review_needed"].includes(v.status));
        break;
      case "published":
        filtered = filtered.filter(v => v.status === "published");
        break;
      case "all":
      default:
        // Show all videos
        break;
    }
    
    // Apply search
    if (searchQuery) {
      filtered = filtered.filter(v => 
        v.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    return filtered;
  };

  const toggleVideoSelection = (id: number) => {
    setSelectedVideos(prev => 
      prev.includes(id) 
        ? prev.filter(v => v !== id)
        : [...prev, id]
    );
  };

  const selectAllVisible = () => {
    const visibleIds = getFilteredVideos().map(v => v.id);
    setSelectedVideos(visibleIds);
  };

  const clearSelection = () => {
    setSelectedVideos([]);
  };

  const getStatusDisplay = (status: string) => {
    switch (status) {
      case "published":
        return { label: "Published", color: "bg-green-100 text-green-800" };
      case "processing":
        return { label: "Processing", color: "bg-amber-100 text-amber-800" };
      case "review_needed":
        return { label: "Review needed", color: "bg-orange-100 text-orange-800" };
      case "needs_attention":
        return { label: "Needs attention", color: "bg-red-100 text-red-800" };
      case "draft":
        return { label: "Draft", color: "bg-gray-100 text-gray-800" };
      default:
        return { label: status, color: "bg-gray-100 text-gray-800" };
    }
  };

  const filteredVideos = getFilteredVideos();

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-amber-50 to-yellow-50">
      {/* Warm Animated Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-1/4 -left-48 w-96 h-96 bg-gradient-to-r from-orange-300/30 to-amber-300/30 rounded-full mix-blend-multiply filter blur-3xl animate-float"></div>
        <div className="absolute bottom-1/3 -right-48 w-96 h-96 bg-gradient-to-r from-yellow-300/30 to-orange-300/30 rounded-full mix-blend-multiply filter blur-3xl animate-float-delayed"></div>
      </div>

      <div className="relative z-10 p-8 lg:p-12 max-w-6xl mx-auto">
        {/* Enhanced Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <div className="flex items-center gap-3 mb-2">
                <div className="relative">
                  <LanguageIcon className="w-8 h-8 text-orange-600" />
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-orange-500 rounded-full animate-pulse"></div>
                </div>
                <h1 className="text-4xl font-bold text-gray-900">Channel subtitles</h1>
              </div>
              <p className="text-lg text-gray-600">
                Manage subtitles across {videos.length} videos â€¢ {videos.filter(v => v.languageCount > 0).length} have subtitles
              </p>
            </div>
            
            <div className="flex items-center gap-3">
              <button className="group relative transform hover:scale-105 transition-all duration-300">
                <div className="absolute -inset-1 bg-gradient-to-r from-orange-500 to-amber-500 rounded-xl blur-lg opacity-20 group-hover:opacity-40 transition-opacity"></div>
                <div className="relative flex items-center gap-2 bg-white/90 backdrop-blur-xl px-4 py-2 rounded-xl shadow-lg border border-white/50">
                  <BoltIcon className="w-4 h-4 text-orange-600" />
                  <span className="font-medium text-gray-900">Auto-generate</span>
                </div>
              </button>
              <button className="group relative transform hover:scale-105 transition-all duration-300">
                <div className="absolute -inset-1 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-xl blur-lg opacity-20 group-hover:opacity-40 transition-opacity"></div>
                <div className="relative flex items-center gap-2 bg-white/90 backdrop-blur-xl px-4 py-2 rounded-xl shadow-lg border border-white/50">
                  <GlobeAltIcon className="w-4 h-4 text-emerald-600" />
                  <span className="font-medium text-gray-900">Translate</span>
                </div>
              </button>
            </div>
          </div>
        </div>

        {/* Enhanced Navigation with Search */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-8">
                {[
                  { key: "all", label: "All", count: videos.length },
                  { key: "drafts", label: "Drafts", count: videos.filter(v => ["draft", "needs_attention", "processing", "review_needed"].includes(v.status)).length }, 
                  { key: "published", label: "Published", count: videos.filter(v => v.status === "published").length }
                ].map((tab) => (
                  <button
                    key={tab.key}
                    onClick={() => setSelectedTab(tab.key)}
                    className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors flex items-center gap-2 ${
                      selectedTab === tab.key
                        ? "border-orange-500 text-orange-600"
                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                    }`}
                  >
                    {tab.label}
                    <span className={`px-2 py-0.5 rounded-full text-xs font-bold ${
                      selectedTab === tab.key
                        ? "bg-orange-100 text-orange-600"
                        : "bg-gray-100 text-gray-500"
                    }`}>
                      {tab.count}
                    </span>
                  </button>
                ))}
              </nav>
            </div>

            <div className="flex items-center gap-3">
              {/* Search */}
              <div className="relative group">
                <div className="absolute -inset-0.5 bg-gradient-to-r from-orange-400 to-amber-400 rounded-xl blur opacity-10 group-focus-within:opacity-25 transition-opacity"></div>
                <div className="relative flex items-center">
                  <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 group-focus-within:text-orange-500 transition-colors z-10" />
                  <input
                    type="text"
                    placeholder="Search videos..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10 pr-4 py-2 bg-white/90 backdrop-blur-xl border border-white/50 rounded-xl focus:ring-2 focus:ring-orange-300 focus:border-orange-300 shadow-sm transition-all w-64 text-gray-900 placeholder-gray-500"
                  />
                </div>
              </div>

              {/* Bulk Actions Toggle */}
              {selectedVideos.length > 0 && (
                <div className="relative">
                  <div className="absolute -inset-1 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-xl blur opacity-30"></div>
                  <div className="relative flex items-center gap-2 bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200/50 rounded-xl px-4 py-2 backdrop-blur-xl">
                    <span className="text-blue-700 font-medium text-sm">{selectedVideos.length} selected</span>
                    <button 
                      onClick={() => setShowBulkActions(!showBulkActions)}
                      className="px-3 py-1 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors"
                    >
                      Actions
                    </button>
                    <button 
                      onClick={clearSelection}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      Clear
                    </button>
                  </div>
                </div>
              )}

            </div>
          </div>

          {/* Bulk Actions Panel */}
          {showBulkActions && selectedVideos.length > 0 && (
            <div className="relative mb-4">
              <div className="absolute -inset-1 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-xl blur opacity-20"></div>
              <div className="relative bg-white/90 backdrop-blur-xl rounded-xl border border-white/50 shadow-lg p-4">
                <div className="flex items-center gap-3">
                  <span className="text-sm font-medium text-gray-700">Bulk actions:</span>
                  <button className="px-3 py-1.5 bg-gradient-to-r from-orange-600 to-amber-600 text-white rounded-lg text-sm font-medium hover:shadow-lg transition-all">
                    Generate Subtitles
                  </button>
                  <button className="px-3 py-1.5 bg-gradient-to-r from-emerald-600 to-teal-600 text-white rounded-lg text-sm font-medium hover:shadow-lg transition-all">
                    Auto-Translate
                  </button>
                  <button className="px-3 py-1.5 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg text-sm font-medium hover:shadow-lg transition-all">
                    Review
                  </button>
                  <button className="px-3 py-1.5 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg text-sm font-medium hover:shadow-lg transition-all">
                    Publish
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Clean Video List */}
        <div className="relative">
          <div className="absolute -inset-1 bg-gradient-to-r from-amber-200/20 to-orange-200/20 rounded-2xl blur-lg"></div>
          <div className="relative rounded-2xl border border-white/50 shadow-lg overflow-hidden" style={{backgroundColor: '#FFFAFA'}}>
            
            {/* Enhanced Table Header */}
            <div className="bg-gradient-to-r from-gray-50 to-orange-50/30 px-6 py-4 border-b border-gray-200">
              <div className="grid grid-cols-12 gap-4 text-sm font-medium text-gray-700 items-center">
                <div className="col-span-1">
                  <button
                    onClick={selectedVideos.length === filteredVideos.length ? clearSelection : selectAllVisible}
                    className={`w-4 h-4 rounded border transition-all flex items-center justify-center ${
                      selectedVideos.length === filteredVideos.length && filteredVideos.length > 0
                        ? 'bg-orange-600 border-orange-600'
                        : 'border-gray-300 hover:border-orange-400'
                    }`}
                    style={!(selectedVideos.length === filteredVideos.length && filteredVideos.length > 0) ? {backgroundColor: '#FFFAFA'} : undefined}
                  >
                    {selectedVideos.length === filteredVideos.length && filteredVideos.length > 0 && (
                      <CheckIcon className="w-3 h-3 text-white" />
                    )}
                  </button>
                </div>
                <div className="col-span-7">Video</div>
                <div className="col-span-2 text-center">Languages</div>
                <div className="col-span-2">Date Modified</div>
              </div>
            </div>

            {/* Enhanced Video Rows */}
            <div className="divide-y divide-gray-100">
              {filteredVideos.map((video) => {
                const statusDisplay = getStatusDisplay(video.status);
                const isSelected = selectedVideos.includes(video.id);
                
                return (
                  <div 
                    key={video.id}
                    className={`group px-6 py-4 transition-all duration-200 cursor-pointer ${
                      isSelected 
                        ? 'bg-gradient-to-r from-orange-100/60 to-amber-100/60' 
                        : 'hover:bg-gradient-to-r hover:from-orange-50/30 hover:to-amber-50/30'
                    }`}
                  >
                    <div className="grid grid-cols-12 gap-4 items-center">
                      {/* Selection Checkbox */}
                      <div className="col-span-1">
                        <button
                          onClick={() => toggleVideoSelection(video.id)}
                          className={`w-4 h-4 rounded border transition-all flex items-center justify-center ${
                            isSelected
                              ? 'bg-orange-600 border-orange-600'
                              : 'border-gray-300 hover:border-orange-400'
                          }`}
                          style={!isSelected ? {backgroundColor: '#FFFAFA'} : undefined}
                        >
                          {isSelected && (
                            <CheckIcon className="w-3 h-3 text-white" />
                          )}
                        </button>
                      </div>

                      {/* Video Info */}
                      <div className="col-span-7 flex items-center gap-4">
                        <div className="relative">
                          <div className="w-24 h-14 bg-gradient-to-br from-gray-200 to-gray-300 rounded-lg flex items-center justify-center overflow-hidden">
                            <FilmIcon className="w-8 h-8 text-gray-500" />
                            {/* Duration overlay */}
                            <div className="absolute bottom-1 right-1 bg-black/80 text-white text-xs px-1 rounded">
                              {video.duration}
                            </div>
                          </div>
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2">
                            <h3 className="font-medium text-gray-900 hover:text-orange-600 transition-colors">
                              {video.title}
                            </h3>
                            {video.autoGenerated && (
                              <span className="text-xs text-gray-500 font-medium">AUTO</span>
                            )}
                          </div>
                          <div className="flex items-center gap-3 text-sm text-gray-500">
                            <span>{video.channel}</span>
                            <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${statusDisplay.color}`}>
                              {statusDisplay.label}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Languages */}
                      <div className="col-span-2 flex items-center justify-center gap-2">
                        <span className={`inline-flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium ${
                          video.languageCount > 0 
                            ? 'bg-gradient-to-br from-green-100 to-emerald-100 text-green-700'
                            : 'bg-gray-100 text-gray-500'
                        }`}>
                          {video.languageCount}
                        </span>
                        {video.languageCount > 0 && (
                          <div className="flex flex-wrap gap-1">
                            {video.languages.slice(0, 2).map((lang, i) => (
                              <span key={i} className="px-1.5 py-0.5 bg-blue-100 text-blue-700 rounded text-xs font-medium">
                                {lang}
                              </span>
                            ))}
                            {video.languages.length > 2 && (
                              <span className="px-1.5 py-0.5 bg-gray-100 text-gray-600 rounded text-xs font-medium">
                                +{video.languages.length - 2}
                              </span>
                            )}
                          </div>
                        )}
                      </div>

                      {/* Date */}
                      <div className="col-span-2">
                        <span className="text-sm text-gray-600">{video.modifiedOn}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Empty State */}
            {filteredVideos.length === 0 && (
              <div className="text-center py-12">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="w-24 h-24 bg-gradient-to-r from-orange-200 to-amber-200 rounded-full blur-2xl opacity-50"></div>
                  </div>
                  <LanguageIcon className="relative w-12 h-12 text-gray-400 mx-auto mb-4" />
                </div>
                <p className="text-gray-600 mb-4">No videos found</p>
                <button 
                  onClick={() => setSelectedTab("all")}
                  className="px-4 py-2 bg-gradient-to-r from-orange-500 to-amber-500 text-white font-medium rounded-lg hover:shadow-lg transition-all"
                >
                  View all videos
                </button>
              </div>
            )}

            {/* Pagination */}
            <div className="bg-gray-50/50 px-6 py-4 border-t border-gray-200">
              <div className="flex items-center justify-between">
                <div className="text-sm text-gray-600">
                  1â€“5 of {videos.length}
                </div>
                <div className="flex items-center gap-2">
                  <button className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-white/50 transition-all">
                    <ChevronDownIcon className="w-4 h-4 rotate-90" />
                  </button>
                  <button className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-white/50 transition-all">
                    <ChevronDownIcon className="w-4 h-4 -rotate-90" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Add CSS for animations */}
        <style jsx>{`
          @keyframes float {
            0%, 100% {
              transform: translateY(0) rotate(0deg);
            }
            33% {
              transform: translateY(-20px) rotate(5deg);
            }
            66% {
              transform: translateY(10px) rotate(-5deg);
            }
          }
          @keyframes float-delayed {
            0%, 100% {
              transform: translateY(0) rotate(0deg);
            }
            33% {
              transform: translateY(15px) rotate(-5deg);
            }
            66% {
              transform: translateY(-25px) rotate(5deg);
            }
          }
          .animate-float {
            animation: float 8s ease-in-out infinite;
          }
          .animate-float-delayed {
            animation: float-delayed 8s ease-in-out infinite;
            animation-delay: 2s;
          }
        `}</style>
      </div>
    </div>
  );
}