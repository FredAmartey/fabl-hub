generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  name            String
  username        String          @unique
  avatarUrl       String?
  channelName     String?
  subscriberCount Int             @default(0)
  isVerified      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  videos          Video[]
  comments        Comment[]
  likes           Like[]
  subscriptions   Subscription[]  @relation("subscriber")
  subscribers     Subscription[]  @relation("channel")
  notifications   Notification[]  @relation("recipient")
  actorNotifications Notification[] @relation("actor")
  transactions    Transaction[]
  analytics       AnalyticsSnapshot[]
  viewEvents      ViewEvent[]

  @@index([username])
  @@index([email])
}

model Video {
  id                  String          @id @default(cuid())
  creatorId           String
  title               String
  description         String?
  thumbnailUrl        String?
  videoUrl            String
  muxAssetId          String?
  muxPlaybackId       String?
  duration            Int             @default(0)
  status              VideoStatus     @default(DRAFT)
  views               Int             @default(0)
  monetizationEnabled Boolean         @default(false)
  aiRatio             Float?          // AI content ratio (0.0 to 1.0)
  isApproved          Boolean         @default(false)
  publishedAt         DateTime?
  scheduledAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  creator             User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  comments            Comment[]
  likes               Like[]
  viewEvents          ViewEvent[]
  moderationLogs      ModerationLog[]
  analytics           VideoAnalytics[]
  transactions        Transaction[]

  @@index([creatorId])
  @@index([status])
  @@index([publishedAt])
}

model Comment {
  id          String          @id @default(cuid())
  videoId     String
  userId      String
  parentId    String?
  content     String
  likes       Int             @default(0)
  isHearted   Boolean         @default(false)
  isPinned    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  video       Video           @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Comment?        @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[]       @relation("CommentReplies")

  @@index([videoId])
  @@index([userId])
  @@index([parentId])
}

model Like {
  id          String          @id @default(cuid())
  userId      String
  videoId     String
  createdAt   DateTime        @default(now())

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       Video           @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([videoId])
  @@index([userId])
}

model Subscription {
  id              String          @id @default(cuid())
  subscriberId    String
  channelId       String
  createdAt       DateTime        @default(now())

  // Relations
  subscriber      User            @relation("subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)
  channel         User            @relation("channel", fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, channelId])
  @@index([channelId])
  @@index([subscriberId])
}

model Notification {
  id          String              @id @default(cuid())
  userId      String
  type        NotificationType
  actorId     String
  entityId    String
  entityType  EntityType
  message     String
  read        Boolean             @default(false)
  createdAt   DateTime            @default(now())

  // Relations
  user        User                @relation("recipient", fields: [userId], references: [id], onDelete: Cascade)
  actor       User                @relation("actor", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

model Transaction {
  id          String              @id @default(cuid())
  creatorId   String
  type        TransactionType
  amount      Float
  currency    String              @default("USD")
  status      TransactionStatus   @default(PENDING)
  sourceId    String?
  sourceName  String
  createdAt   DateTime            @default(now())
  paidAt      DateTime?

  // Relations
  creator     User                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  video       Video?              @relation(fields: [sourceId], references: [id], onDelete: SetNull)

  @@index([creatorId])
  @@index([status])
  @@index([createdAt])
}

model AnalyticsSnapshot {
  id                  String          @id @default(cuid())
  creatorId           String
  date                DateTime
  views               Int             @default(0)
  watchTimeMinutes    Int             @default(0)
  subscribersGained   Int             @default(0)
  subscribersLost     Int             @default(0)
  estimatedRevenue    Float           @default(0)
  impressions         Int             @default(0)
  clickThroughRate    Float           @default(0)
  createdAt           DateTime        @default(now())

  // Relations
  creator             User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([creatorId, date])
  @@index([creatorId])
  @@index([date])
}

model VideoAnalytics {
  id                  String          @id @default(cuid())
  videoId             String
  date                DateTime
  views               Int             @default(0)
  watchTimeMinutes    Int             @default(0)
  avgViewDuration     Float           @default(0)
  likes               Int             @default(0)
  comments            Int             @default(0)
  shares              Int             @default(0)
  createdAt           DateTime        @default(now())

  // Relations
  video               Video           @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, date])
  @@index([videoId])
  @@index([date])
}

model ViewEvent {
  id          String          @id @default(cuid())
  videoId     String
  userId      String?
  watchTime   Int             @default(0) // in seconds
  completed   Boolean         @default(false)
  createdAt   DateTime        @default(now())

  // Relations
  video       Video           @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user        User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([videoId])
  @@index([userId])
  @@index([createdAt])
}

model ModerationLog {
  id          String          @id @default(cuid())
  videoId     String
  status      ModerationStatus
  reason      String?
  aiScore     Float?          // AI detection confidence score
  createdAt   DateTime        @default(now())

  // Relations
  video       Video           @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([status])
}

// Enums
enum VideoStatus {
  DRAFT
  PROCESSING
  PUBLISHED
  SCHEDULED
  UNLISTED
  PRIVATE
}

enum NotificationType {
  LIKE
  COMMENT
  SUBSCRIBE
  UPLOAD
  MENTION
  MILESTONE
}

enum EntityType {
  VIDEO
  COMMENT
  CHANNEL
}

enum TransactionType {
  AD_REVENUE
  SUBSCRIPTION
  TIP
  MERCHANDISE
  PREMIUM_CONTENT
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED
}

enum ModerationStatus {
  PENDING
  APPROVED
  FLAGGED
  REJECTED
}